<?xml version="1.0"?>
<testsuite name="Chrome Headless 104.0.5112.102 (Windows 10)" package="unit" timestamp="2022-09-09T09:01:54" id="0" hostname="LAPTOP-8L0JVTM8" tests="120" errors="0" failures="10" time="3.166">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/104.0.5112.102 Safari/537.36"/>
  </properties>
  <testcase name="ApiService deleteAppointment returns empty response" time="0.063" classname=".ApiService"/>
  <testcase name="ApiService bookAppointment should add appointment details in post request body" time="0.012" classname=".ApiService"/>
  <testcase name="ApiService bookAppointment should return patient details if POST method success" time="0.01" classname=".ApiService"/>
  <testcase name="ApiService getUserDetails should return user details" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService registerPatient should return patient details if POST method success" time="0.01" classname=".ApiService"/>
  <testcase name="ApiService login should return user Id if auth success" time="0.011" classname=".ApiService"/>
  <testcase name="ApiService updateDetails should return new user details after submitting the update" time="0.011" classname=".ApiService"/>
  <testcase name="ApiService getAppointments should return requested appointments of particular patient" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService login should return error message if auth fails" time="0.024" classname=".ApiService">
    <failure type="">Error: Expected undefined to equal Object({ message: 'Incorrect username or password', status: 401 }).
    at &lt;Jasmine&gt;
    at SafeSubscriber._error (http://localhost:9876/_karma_webpack_/src/app/services/api.service.spec.ts:86:35)
    at SafeSubscriber.__tryOrUnsub (http://localhost:9876/_karma_webpack_/node_modules/rxjs/_esm2015/internal/Subscriber.js:183:1)
    at SafeSubscriber.error (http://localhost:9876/_karma_webpack_/node_modules/rxjs/_esm2015/internal/Subscriber.js:135:1)
</failure>
  </testcase>
  <testcase name="ApiService login should send user credentials in post request body" time="0.01" classname=".ApiService"/>
  <testcase name="ApiService should be created" time="0.005" classname=".ApiService"/>
  <testcase name="ApiService getDiseasesList should return suffer list" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService requestedAppointments should return all appointments requested by all patients" time="0.006" classname=".ApiService"/>
  <testcase name="ApiService getParticularPatient should return particular patient details" time="0.01" classname=".ApiService"/>
  <testcase name="ApiService registerPatient should add patient details in post request body" time="0.007" classname=".ApiService"/>
  <testcase name="ApiService getAllPatientsList should return all patient details" time="0.005" classname=".ApiService"/>
  <testcase name="HeaderComponent should get logged user details" time="0.708" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should create" time="0.062" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should get logged user id by default" time="0.018" classname=".HeaderComponent"/>
  <testcase name="HeaderComponent should get profile details by default" time="0.017" classname=".HeaderComponent"/>
  <testcase name="ViewPatientComponent should create" time="0.099" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call scheduleAppointment method for valid form input&quot;" time="0.099" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call getParticularPatient method of DataService by default" time="0.021" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call bookAppointment method of DataService with appointment details" time="0.025" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent &quot;Book Appointment&quot; button should be disabled when clicking on &quot;Scheduled Appointment&quot;" time="0.028" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should get sufferList when clicking on &quot;Book Appointment&quot;" time="0.022" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent Book Appointment &amp; Scheduled Appointment should be enabled by default" time="0.009" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent &quot;Scheduled Appointment&quot; button should be disabled when clicking on &quot;Book Appointment&quot;" time="0.02" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call scheduleded method after deleting an appointment" time="0.018" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should call deleteAppointment method of DataService with selected appointment id" time="0.475" classname=".ViewPatientComponent">
    <failure type="">Expected spy deleteAppointment to have been called with:
  [ 11 ]
but actual calls were:
  [ undefined ].

Call 0:
  Expected $[0] = undefined to equal 11.
    at &lt;Jasmine&gt;
    at http://localhost:9876/_karma_webpack_/src/app/component/view-patient/view-patient.component.spec.ts:264:45
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
</failure>
  </testcase>
  <testcase name="ViewPatientComponent should call cancelAppointment method with selected appointment id" time="0.014" classname=".ViewPatientComponent"/>
  <testcase name="ViewPatientComponent should navigate to requested_appointments page after booking an appointment" time="0.022" classname=".ViewPatientComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call view method with the id of selected patient" time="0.038" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call cancelAppointment method with the id of selected patient" time="0.013" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call cancelAppointment method with the id of selected patient" time="0.022" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should fetch all appointments after cancelling an appointment" time="0.012" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call requestedAppointments method by default " time="0.011" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should create" time="0.012" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllRequestedAppointmentsComponent should call view method with the id of selected patient" time="0.013" classname=".AllRequestedAppointmentsComponent"/>
  <testcase name="AllPatientsListComponent should call view method with the id of selected patient : case 1" time="0.031" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should call view method with the id of selected patient" time="0.012" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should call getAllPatientsList method when page loads " time="0.005" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should create" time="0.008" classname=".AllPatientsListComponent"/>
  <testcase name="AllPatientsListComponent should call view method with the id of selected patient : case 2" time="0.012" classname=".AllPatientsListComponent"/>
  <testcase name="DataService  should return -1 userId from local storage if exists but isLogin is false" time="0.007" classname=".DataService"/>
  <testcase name="DataService  should return -1 if user is no logged in or userid in localstorage is invalid" time="0.003" classname=".DataService"/>
  <testcase name="DataService  should return -1 if user is no logged in or userid in localstorage is invalid" time="0.002" classname=".DataService"/>
  <testcase name="DataService #updateProfile should return error on occurence of error" time="0.005" classname=".DataService">
    <failure type="">Error: 1 timer(s) still in the queue.
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1760:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at runInTestZone (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:545:1)
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:560:1)
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <testcase name="DataService #dologin should return isLogin as false on click logout" time="0.006" classname=".DataService"/>
  <testcase name="DataService #getParticularPatient should return patient details on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getParticularPatient should return error on providing invalid user id" time="0.004" classname=".DataService"/>
  <testcase name="DataService #requestedAppointments should return error on occurence of error" time="0.004" classname=".DataService"/>
  <testcase name="DataService #bookAppointment should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="DataService #registerPatient should return patientDetails  on reporting with valid user id " time="0.004" classname=".DataService"/>
  <testcase name="DataService  should return -1 userId from local storage if exists but isLogin is false" time="0.003" classname=".DataService"/>
  <testcase name="DataService #registerPatient should return null on reporting with invalid id " time="0.003" classname=".DataService"/>
  <testcase name="DataService #bookAppointment should return appointmentDetails  on reporting with valid user id " time="0.003" classname=".DataService"/>
  <testcase name="DataService  should return -1 if user is no logged in or userid not exists in localstorage" time="0.006" classname=".DataService"/>
  <testcase name="DataService #getUserDetails should return user details on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #registerPatient should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getAppointments should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getUserDetails should return error on providing invalid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getAllPatientsList should return user details on providing valid user id" time="0.004" classname=".DataService"/>
  <testcase name="DataService #getAppointments should return appointment details on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getDiseasesList should return error on providing invalid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService  should return 1 from local storage if exists and isLogin is true" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getDiseasesList should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="DataService  should return true on logging in with right credentials" time="0.002" classname=".DataService"/>
  <testcase name="DataService #getUserDetails should return error on occurence of error" time="0.002" classname=".DataService"/>
  <testcase name="DataService  should return false after creation" time="0.005" classname=".DataService"/>
  <testcase name="DataService #getParticularPatient should return error on occurence of error" time="0.004" classname=".DataService"/>
  <testcase name="DataService #updateProfile should return true on providing valid user details" time="0.004" classname=".DataService"/>
  <testcase name="DataService #getDiseasesList should return list on providing valid user id" time="0.004" classname=".DataService"/>
  <testcase name="DataService #deleteAppointment should return empty object on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getAllPatientsList should return error on providing invalid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #requestedAppointments should return appointments on providing valid user id" time="0.003" classname=".DataService"/>
  <testcase name="DataService #getAllPatientsList should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="DataService #deleteAppointment should return error on occurence of error" time="0.003" classname=".DataService"/>
  <testcase name="LoginComponent should redirect to dashboard on correct credentials" time="0.068" classname=".LoginComponent"/>
  <testcase name="LoginComponent #authenticateUser should return error on occurence of error" time="0.018" classname=".LoginComponent"/>
  <testcase name="LoginComponent should enable login button(form valid) when both field are valid" time="0.014" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display minlength 3 username validation error when the username length less than 3" time="0.018" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display minlength 8 password validation error when the password length less than 8" time="0.015" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display maxlength password validation error when the password length exceeds 20" time="0.014" classname=".LoginComponent"/>
  <testcase name="LoginComponent #dologin should return false if form is invalid" time="0.015" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display maxlength username validation error when the username length greater than 20" time="0.014" classname=".LoginComponent"/>
  <testcase name="LoginComponent should hide validation messages and call login method from authservice for valid credentials" time="0.021" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display password pattern validation error" time="0.014" classname=".LoginComponent"/>
  <testcase name="LoginComponent All validation errors should be hidden and form should be invalid by default" time="0.011" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not display any error when the username field is valid" time="0.011" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display no username validation error when the field kept as null(dirty)" time="0.013" classname=".LoginComponent"/>
  <testcase name="LoginComponent should not display password error when the password field is valid" time="0.01" classname=".LoginComponent"/>
  <testcase name="LoginComponent should display no password validation error when the field kept as null(dirty)" time="0.011" classname=".LoginComponent"/>
  <testcase name="FormComponent gender validation gets pass when clicking female radio button" time="0.066" classname=".FormComponent"/>
  <testcase name="FormComponent All validation errors should be hidden and form should be invalid by default" time="0.016" classname=".FormComponent"/>
  <testcase name="FormComponent should display no date of birth validation error when the field kept as null(dirty)" time="0.033" classname=".FormComponent"/>
  <testcase name="FormComponent should create" time="0.018" classname=".FormComponent"/>
  <testcase name="FormComponent should display lastname minimum length validation error when the field has less than 3 length" time="0.018" classname=".FormComponent"/>
  <testcase name="FormComponent should display firstname minimum length validation error when the field has less than 3 length" time="0.02" classname=".FormComponent"/>
  <testcase name="FormComponent Date of birth validation gets pass when the field has valid value" time="0.024" classname=".FormComponent"/>
  <testcase name="FormComponent mobile field validity" time="0.023" classname=".FormComponent">
    <failure type="">Error: Expected Object({ requiredPattern: '^((\+91-?)|0)?[0-9]{10}$', actualValue: '12345678901343' }) to be falsy.
    at &lt;Jasmine&gt;
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:462:31)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
</failure>
  </testcase>
  <testcase name="FormComponent should display no firstname validation error when the field kept as null(dirty)" time="0.023" classname=".FormComponent"/>
  <testcase name="FormComponent should display no email validation error when the field has kept as null(dirty)" time="0.036" classname=".FormComponent">
    <failure type="">Error: Expected true to be falsy.
    at &lt;Jasmine&gt;
    at http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:548:31
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
</failure>
    <failure type="">Error: Expected null to be truthy.
    at &lt;Jasmine&gt;
    at http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:549:33
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
</failure>
    <failure type="">Error: Uncaught (in promise): TypeError: Cannot read properties of null (reading 'textContent')
TypeError: Cannot read properties of null (reading 'textContent')
    at http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:552:68
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:289:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:891:1
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:421:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:323:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:420:1)
error properties: Object({ rejection: TypeError: Cannot read properties of null (reading 'textContent'), promise: [object Promise], zone: Zone({ _parent: Zone({ _parent: null, _name: '&lt;root&gt;', _properties: Object({  }), _zoneDelegate: ZoneDelegate({ _taskCounts: Object({ microTask: 0, macroTask: 0, eventTask: 0 }), zone: &lt;circular reference: Object&gt;, _parentDelegate: null, _forkZS: null, _forkDlgt: null, _forkCurrZone: null, _interceptZS: null, _interceptDlgt: null, _interceptCurrZone: null, _invokeZS: null, _invokeDlgt: null, _invokeCurrZone: null, _handleErrorZS: null, _handleErrorDlgt: null, _handleErrorCurrZone: null, _scheduleTaskZS: null, _scheduleTaskDlgt: null, _scheduleTaskCurrZone: null, _invokeTaskZS: null, _invokeTaskDlgt: null, _invokeTaskCurrZone: null, _cancelTaskZS: null, _cancelTaskDlgt: null, _cancelTaskCurrZone: null, _hasTaskZS: null, _hasTaskDlgt: null, _hasTaskDlgtOwner: null, _hasTaskCurrZone: null }) }), _name: 'ProxyZone', _properties: Object({ ProxyZoneSpec: ProxyZoneSpec({  ...
Error: Uncaught (in promise): TypeError: Cannot read properties of null (reading 'textContent')
TypeError: Cannot read properties of null (reading 'textContent')
    at http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:552:68
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:289:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:891:1
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:421:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:323:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:420:1)
    at resolvePromise (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:832:1)
    at http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:898:1
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:421:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:323:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:420:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.runTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:188:1)
    at ./node_modules/zone.js/dist/zone.js.ZoneTask.invokeTask (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:503:1)
    at ZoneTask.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:492:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.flushMicrotasks (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1546:1)
    at flushMicrotasks (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1821:37)
</failure>
  </testcase>
  <testcase name="FormComponent gender field validity" time="0.039" classname=".FormComponent"/>
  <testcase name="FormComponent should display mobile maximun length validation error when the field has greater than 10 length" time="0.023" classname=".FormComponent">
    <failure type="">Error: Expected &lt;div _ngcontent-a-c56 id="error-number-mobile" class="alert alert-danger error-msg"&gt;...&lt;/div&gt; to be falsy.
    at &lt;Jasmine&gt;
    at http://localhost:9876/_karma_webpack_/src/app/component/form/form.component.spec.ts:530:38
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at FakeAsyncTestZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.FakeAsyncTestZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1652:1)
</failure>
  </testcase>
  <testcase name="FormComponent should display  email pattern validation error when the field has no value" time="0.025" classname=".FormComponent"/>
  <testcase name="FormComponent should call submitform method for valid form" time="0.059" classname=".FormComponent"/>
  <testcase name="FormComponent gender validation gets pass when clicking male radio button" time="0.035" classname=".FormComponent"/>
  <testcase name="FormComponent should display firstname maximun length validation error when the field has greater than 20 length" time="0.025" classname=".FormComponent"/>
  <testcase name="FormComponent should display lastname maximun length validation error when the field has greater than 20 length" time="0.026" classname=".FormComponent"/>
  <testcase name="FormComponent should display mobile number pattern validation error when the field has value" time="0.024" classname=".FormComponent"/>
  <testcase name="FormComponent should display no lastname validation error when the field kept as null(dirty)" time="0.019" classname=".FormComponent"/>
  <testcase name="FormComponent should display no mobile number validation error when the field has kept as null(dirty)" time="0.02" classname=".FormComponent"/>
  <testcase name="ProfileComponent should submit profile changes with validation" time="0.046" classname=".ProfileComponent">
    <failure type="">Error: 1 timer(s) still in the queue.
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1760:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at runInTestZone (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:545:1)
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:560:1)
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <testcase name="ProfileComponent #getProfileDetails should return error on occurence of error" time="0.015" classname=".ProfileComponent">
    <failure type="">Error: 2 timer(s) still in the queue.
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1760:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at runInTestZone (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:545:1)
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:560:1)
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <testcase name="ProfileComponent should validate the edit profile form" time="0.03" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should populate form fields with values on edit profile button click" time="0.017" classname=".ProfileComponent">
    <failure type="">Error: 1 timer(s) still in the queue.
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1760:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at runInTestZone (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:545:1)
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:560:1)
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <testcase name="ProfileComponent should display edit profile form on edit profile button click" time="0.021" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should display profile details on clicking discard button" time="0.018" classname=".ProfileComponent"/>
  <testcase name="ProfileComponent should display profile details on load" time="0.012" classname=".ProfileComponent">
    <failure type="">Error: 1 timer(s) still in the queue.
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:1760:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:386:1)
    at ProxyZoneSpec.push../node_modules/zone.js/dist/zone-testing.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:292:1)
    at ZoneDelegate../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:385:1)
    at Zone../node_modules/zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone.js:143:1)
    at runInTestZone (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:545:1)
    at UserContext.&lt;anonymous&gt; (http://localhost:9876/_karma_webpack_/node_modules/zone.js/dist/zone-testing.js:560:1)
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <system-out>
    <![CDATA[Chrome Headless 104.0.5112.102 (Windows 10) WARN: 'Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?'
,Chrome Headless 104.0.5112.102 (Windows 10) LOG: Object{firstName: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: 'xxxxxxx', value: 'xxxxxxx', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, lastName: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: 'yyyyyyyy', value: 'yyyyyyyy', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, gender: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [..., ...], _onChange: [..., ...], _pendingValue: 'male', value: 'male', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, dob: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: '2018-12-25', value: '2018-12-25', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, mobile: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: '8870783265', value: '8870783265', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, email: FormControl{validator: function (control) { ... }, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: 'xxxxx@gmail.com', value: 'xxxxx@gmail.com', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}, description: FormControl{validator: null, asyncValidator: null, _onCollectionChange: () => { ... }, pristine: true, touched: false, _onDisabledChange: [...], _onChange: [...], _pendingValue: '', value: '', status: 'VALID', errors: null, valueChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, statusChanges: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, _parent: FormGroup{validator: ..., asyncValidator: ..., _onCollectionChange: ..., pristine: ..., touched: ..., _onDisabledChange: ..., controls: ..., valueChanges: ..., statusChanges: ..., status: ..., value: ..., errors: ...}}}
,Chrome Headless 104.0.5112.102 (Windows 10) LOG: Patient{firstName: 'xxxxxxx', lastName: 'yyyyyyyy', gender: 'male', dob: '2018-12-25', mobile: '8870783265', email: 'xxxxx@gmail.com', description: '', registeredTime: Fri Sep 09 2022 14:31:58 GMT+0530 (India Standard Time)}

]]>
  </system-out>
  <system-err/>
</testsuite>